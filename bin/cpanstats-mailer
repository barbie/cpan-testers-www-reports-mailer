#!/usr/bin/perl
use strict;
$|++;

my $VERSION = '0.01';

#----------------------------------------------------------------------------

=head1 NAME

cpanstats-mailer - script to mail authors links to reports of their modules

=head1 SYNOPSIS

  perl cpanstats-mailer --config=prefs.ini

=head1 DESCRIPTION

Collates report links for each author, based on the preferences set for each
author, and mails them a single report. This script is expected to run daily
and in tests produces only 40% of the previous mail volumes to authors.

=cut

# -------------------------------------
# Library Modules

use lib qw(./lib ../lib);

use Compress::Zlib;
use Config::IniFiles;
use File::Basename;
use File::Slurp;
use Getopt::ArgvFile default=>1;
use Getopt::Long;
use LWP::UserAgent;
use Path::Class;
use Parse::CPAN::Authors;
use Template;
use WWW::Mechanize;

use CPAN::Testers::WWW::Reports::Mailer::DBUtils;

# -------------------------------------
# Variables

my (%options,%authors,%prefs);
my (%counts);

use constant    LASTMAIL    => '_lastmail';

my $HOW  = '/usr/sbin/sendmail -bm';
my $HEAD = 'To: "NAME" <EMAIL>
From: CPAN Tester Report Server <do_not_reply@cpantesters.org>
Date: DATE
Subject: SUBJECT

';

my @dotw = (    "Sunday", "Monday", "Tuesday", "Wednesday",
                "Thursday", "Friday", "Saturday" );

my @months = (
        { 'id' =>  1,   'value' => "January",   },
        { 'id' =>  2,   'value' => "February",  },
        { 'id' =>  3,   'value' => "March",     },
        { 'id' =>  4,   'value' => "April",     },
        { 'id' =>  5,   'value' => "May",       },
        { 'id' =>  6,   'value' => "June",      },
        { 'id' =>  7,   'value' => "July",      },
        { 'id' =>  8,   'value' => "August",    },
        { 'id' =>  9,   'value' => "September", },
        { 'id' => 10,   'value' => "October",   },
        { 'id' => 11,   'value' => "November",  },
        { 'id' => 12,   'value' => "December"   },
);

# -------------------------------------
# Program

init_options();
check_reports();

printf( "COUNT: %s\n", emaildate());
printf( "%7s = %6d\n", $_, $counts{$_} )    for(keys %counts);

# -------------------------------------
# Functions

sub check_reports {
    my $last_id   = get_lastid();
    my (%reports,%tvars);

    # find all reports since last update
    my @rows = $options{cpanstats}->GetQuery('array',"SELECT id,dist,version,platform,perl,state FROM cpanstats WHERE id > $last_id AND state NOT IN ('cpan') ORDER BY id");
    return  unless(@rows);

    for my $row (@rows) {
        $counts{REPORTS}++;
        $last_id = $row->[0];
        $row->[5] = uc $row->[5];
        $counts{$row->[5]}++;
        my $author = get_author($row->[1], $row->[2]) || next;

        # get author preferences
        my $prefs  = get_prefs($author) || next;

        # do we need to worry about this author?
        if($prefs->{active} == 2) {
            $counts{NOMAIL}++;
            next;
        }

        # get distribution preferences
        $prefs  = get_prefs($author, $row->[1])    || next;
        next    if($prefs->{actions}{'NONE'});
        next    unless($prefs->{actions}{$row->[5]});

        # check whether only first instance required
        if($prefs->{tuple} eq 'FIRST') {
            my @count = $options{cpanstats}->GetQuery('array',"SELECT count(id) FROM cpanstats WHERE platform=? AND perl=? AND state=? AND id < ?",
                        $row->[3], $row->[4], $row->[5], $row->[0]);
            next    if($count[0]->[0] > 1);
        }

        # TODO:
        # if set to 'ALL' check this is the current distribution
        # 'OLD' should allow EVERYTHING through!

        push @{$reports{$author}->{dists}{$row->[1]}->{versions}{$row->[2]}->{platforms}{$row->[3]}->{perls}{$row->[4]}->{states}{uc $row->[5]}->{value}}, $row->[0];
    }

    for my $author (keys %reports) {
        my $pause = $options{pause}->author($author);
        $tvars{name}   = $pause->name;
        $tvars{author} = $author;
        $tvars{dists}  = ();

        # get author preferences
        my $prefs = get_prefs($author);

        # active:
        # 0 - new author, no correspondance
        # 1 - new author, notification mailed
        # 2 - author requested no mail
        # 3 - author active
        if(!$prefs->{active} || $prefs->{active} == 0) {
            $tvars{subject} = 'Welcome to CPAN Testers';
            write_mail('notification.eml',\%tvars);
            update_preferences($author);
        }

        my ($reports,@e);
        for my $dist (keys %{$reports{$author}->{dists}}) {
            my $v = $reports{$author}->{dists}{$dist};
            my @d;
            for my $version (keys %{$v->{versions}}) {
                my $w = $v->{versions}{$version};
                my @c;
                for my $platform (keys %{$w->{platforms}}) {
                    my $x = $w->{platforms}{$platform};
                    my @b;
                    for my $perl (keys %{$x->{perls}}) {
                        my $y = $x->{perls}{$perl};
                        my @a;
                        for my $state (keys %{$y->{states}}) {
                            my $z = $y->{states}{$state};
                            push @a, {state => $state, ids => $z->{value}};
                            $reports++;
                        }
                        push @b, {perl => $perl, states => \@a};
                    }
                    push @c, {platform => $platform, perls => \@b};
                }
                push @d, {version => $version, platforms => \@c};
            }
            push @e, {dist => $dist, versions => \@d};
        }

        next    unless($reports);

        $tvars{dists}   = \@e;
        $tvars{subject} = 'CPAN Testers Daily Report';

        write_mail('mailer.eml',\%tvars);
    }

    get_lastid($last_id);
}

sub get_lastid {
    my $id = shift;

    overwrite_file( LASTMAIL, 0 ) unless -f LASTMAIL;

    if ($id) {
        overwrite_file( LASTMAIL, $id );
    } else {
        my $id = read_file(LASTMAIL);
        return $id;
    }
}

sub get_author {
    my ($dist,$vers) = @_;

    unless($authors{$dist}{$vers}) {
        my @author = $options{cpanstats}->GetQuery('array',"SELECT tester FROM cpanstats WHERE dist=? AND version=? AND state='cpan' LIMIT 1", $dist, $vers);
        $authors{$dist}{$vers} = $author[0]->[0];
    }
    return $authors{$dist}{$vers};
}


sub get_prefs {
    my ($author,$dist) = @_;

    # get distribution defaults
    if($author && $dist) {
        if(defined $prefs{$author}{dists}{$dist}) {
            return $prefs{$author}{dists}{$dist};
        }

        my @rows = $options{authors}->GetQuery('hash',"SELECT action,tuple FROM prefs_distributions WHERE pauseid=? AND distribution=?", $author,$dist);
        if(@rows) {
            $rows[0]->{action} ||= 'FAIL';
            my %actions = map {$_ => 1} split(',',$rows[0]->{action});
            $prefs{$author}{dists}{$dist}{actions} = \%actions;
            $prefs{$author}{dists}{$dist}{tuple} = $rows[0]->{tuple} || 'FIRST';
            return $prefs{$author}{dists}{$dist};
        }

        # fall through and assume author defaults
    }

    # get author defaults
    if($author) {
        if(defined $prefs{$author}{default}) {
            return $prefs{$author}{default};
        }

        my @rows = $options{authors}->GetQuery('hash',"SELECT active,action,tuple FROM prefs_authors WHERE pauseid=?", $author);
        if(@rows) {
            $rows[0]->{action} ||= 'FAIL';
            my %actions = map {$_ => 1} split(',',$rows[0]->{action});
            $prefs{$author}{default}{actions} = \%actions;
            $prefs{$author}{default}{tuple}  = $rows[0]->{tuple}  || 'FIRST';
            $prefs{$author}{default}{active} = $rows[0]->{active} || 0;
            return $prefs{$author}{default};
        }

        # fall through and assume new author
    }

    # use global defaults
    my %prefs = (actions => {'FAIL' => 1}, tuple => 'FIRST', active => 0);
    return \%prefs;
}

sub write_mail {
    my ($template,$parms) = @_;
    my ($text);

    my $subject = $parms->{subject} || 'CPAN Testers Daily Reports';

    $counts{MAILS}++;
#print "$parms->{author} - $subject\n";
#return;

    my $DATE = emaildate();
    $DATE =~ s/\s+$//;

    $options{tt}->process( $template, $parms, \$text ) || die $options{tt}->error;

        my $cmd = qq!| $HOW $parms->{author}\@cpan.org!;
        my $body = $HEAD . $text;
        $body =~ s/NAME/$parms->{name}/g;
        $body =~ s/EMAIL/$parms->{author}\@cpan.org/g;
        $body =~ s/DATE/$DATE/g;
        $body =~ s/SUBJECT/$subject/g;

print "$body\n";
return;

        if(my $fh = IO::File->new($cmd)) {
                print $fh $body;
                $fh->close;
                print "GOOD: $parms->{author}\n";
        } else {
                print "BAD:  $parms->{author}\n";
        }
}

sub update_preferences {
    my $author = shift;

    my @rows = $options{authors}->GetQuery('hash',"SELECT * FROM prefs_authors WHERE pauseid=?", $author);
    if(@rows) {
        $options{authors}->DoQuery('UPDATE prefs_authors SET active=1,lastlogin=? WHERE pauseid=?', time(), $author);
    } else {
        $options{authors}->DoQuery("INSERT INTO prefs_authors (pauseid,active,lastlogin,action,tuple) VALUES (?,1,?,'FAIL','FIRST')", $author, time());
    }
}

sub init_options {
    GetOptions( \%options,
        'config=s',
        'help|h',
        'version|V'
    );

    _help(1)    if($options{help});
    _help(0)    if($options{version});

    die "Configuration file [$options{config}] not found\n" unless(-f $options{config});

    # load configuration
    my $cfg = Config::IniFiles->new( -file => $options{config} );

    # configure cpanstats DB
    my %opts = map {$_ => $cfg->val('CPANSTATS',$_);} qw(driver database dbfile dbhost dbport dbuser dbpass);
    $options{cpanstats} = CPAN::Testers::WWW::Reports::Mailer::DBUtils->new(%opts);

    # configure preferences db
    %opts = map {$_ => $cfg->val('AUTHORS',$_);} qw(driver database dbfile dbhost dbport dbuser dbpass);
    $options{authors} = CPAN::Testers::WWW::Reports::Mailer::DBUtils->new(%opts);

    die "Cannot configure CPANSTATS database\n" unless($options{cpanstats});
    die "Cannot configure AUTHORS database\n"   unless($options{authors});

    $options{pause} = download_mailrc();

    # set up API to Template Toolkit
    $options{tt} = Template->new(
        {
            #    POST_CHOMP => 1,
            #    PRE_CHOMP => 1,
            #    TRIM => 1,
            EVAL_PERL    => 1,
            INCLUDE_PATH => [ 'templates' ],
        }
    );
}

sub _help {
    my $full = shift;

    if($full) {
        print <<HERE;

Usage: $0 \\
         [-config=<file>] [-h] [-V]

  --config=<file>   database configuration file
  -h                this help screen
  -V                program version

HERE

    }

    print "$0 v$VERSION\n";
    exit(0);
}

sub emaildate {
    my $fmt = 'DABV, DD MABV YYYY hh:mm:ss TZ';
        my ($second,$minute,$hour,$day,$mon,$year,$dotw) = localtime(time());
        $year += 1900;

        # create date mini strings
        my $fmonth      = sprintf "%s",   $months[$mon]->{value};
        my $fday        = sprintf "%02d", $day;
        my $fyear       = sprintf "%04d", $year;
        my $fdotw       = sprintf "%s",   (defined $dotw ? $dotw[$dotw] : 'Sunday');
        my $amonth      = substr($fmonth,0,3);
        my $adotw       = substr($fdotw,0,3);
        my $fhour       = sprintf "%02d", $hour;
        my $fminute     = sprintf "%02d", $minute;
        my $fsecond     = sprintf "%02d", $second;

        # transpose format string into a date string
        $fmt =~ s/hh/$fhour/;
        $fmt =~ s/mm/$fminute/;
        $fmt =~ s/ss/$fsecond/;
        $fmt =~ s/MABV/$amonth/;
        $fmt =~ s/DABV/$adotw/;
        $fmt =~ s/YYYY/$fyear/;
        $fmt =~ s/DD/$fday/;
        $fmt =~ s/TZ/UTC/;

    return $fmt;
}

sub download_mailrc {
    my $data;

    if(-f 'data/01mailrc.txt') {
        $data = read_file('data/01mailrc.txt');

    } else {
        my $url = 'http://www.cpan.org/authors/01mailrc.txt.gz';
        my $ua  = LWP::UserAgent->new;
        $ua->timeout(180);
        my $response = $ua->get($url);

        if ($response->is_success) {
            my $gzipped = $response->content;
            $data = Compress::Zlib::memGunzip($gzipped);
            die "Error uncompressing data from $url" unless $data;
        } else {
            die "Error fetching $url";
        }
    }

    my $p = Parse::CPAN::Authors->new($data);
    die "Cannot parse data from 01mailrc.txt"   unless($p);
    return $p;
}

__END__

=head1 BUGS, PATCHES & FIXES

There are no known bugs at the time of this release. However, if you spot a
bug or are experiencing difficulties, that is not explained within the POD
documentation, please send bug reports and patches to the RT Queue (see below).

Fixes are dependant upon their severity and my availablity. Should a fix not
be forthcoming, please feel free to (politely) remind me.

RT Queue -
http://rt.cpan.org/Public/Dist/Display.html?Name=CPAN-Testers-WWW-Reports-Mailer

=head1 SEE ALSO

L<CPAN::WWW::Testers::Generator>,
L<CPAN::WWW::Testers>,
L<CPAN::Testers::WWW::Statistics>

F<http://www.cpantesters.org/>,
F<http://stats.cpantesters.org/>

=head1 AUTHOR

  Barbie, <barbie@cpan.org>
  for Miss Barbell Productions <http://www.missbarbell.co.uk>.

=head1 COPYRIGHT AND LICENSE

  Copyright (C) 2008 Barbie for Miss Barbell Productions.

  This module is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.

=cut

